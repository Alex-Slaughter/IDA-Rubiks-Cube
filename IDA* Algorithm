function CPH(CP) # Calculates the number of moves each individual corner is from its correct position
	totalCP=0 # Counter for the sum of moves needed
	for i in 1:8
		if abs(CP[i]-i)==1 || abs(CP[i]-i)==3 || abs(CP[i]-i)==4
			totalCP=totalCP+1
		elseif abs(CP[i]-i)==2 || abs(CP[i]-i)==5 || abs(CP[i]-i)==7
			totalCP=totalCP+2
		elseif abs(CP[i]-i)==6
			totalCP=totalCP+3
		else
			totalCP=totalCP
		end
	end
	return totalCP
end

function EPH(EP) # Calculates the number of moves each individual edge is from its correct position
	totalEP=0 # Counter for the sum of moves needed
	for i in 1:12
		if abs(EP[i]-i)==1 || abs(EP[i]-i)==3 || abs(EP[i]-i)==4 || abs(EP[i]-i)==7
			totalEP=totalEP+1
		elseif abs(EP[i]-i)==2 || abs(EP[i]-i)==8
			totalEP=totalEP+2
		elseif abs(EP[i]-i)==9 || abs(EP[i]-i)==11 || abs(EP[i]-i)==5 || abs(EP[i]-i)==6
			totalEP=totalEP+3
		elseif abs(EP[i]-i)==10
			totalEP=totalEP+4
		else
			totalEP=totalEP
		end
	end
	return totalEP
end

function H(CP,EP,CO,EO) # Calculates a heuristic for the IDA* algorithm
	A=sum(CO)
	B=sum(EO)
	C=CPH(CP)
	D=EPH(EP)
	H=A+B+C+D
	H=H/8
	H=floor(H)
end





function IDA(CP,EP,CO,EO) # Function for one iteration of the IDA* algorithm
	for i=0:12 # test each movement 0=identity, 1-12= U,D,F,B,L,R clockwise and anticlockwise
		if i==1 #testing U movement on current configuration
			temp=U(CP,EP,CO,EO) #initialise temporary array of vectors created by U
			if H(CP,EP,CO,EO)==0 #if H==0 (solved position)
				complete=1 # Tells IDA_algorithm that we have a solved configuration
				for i = 1:length(pathlist)
					if check==0
						x=pathlist[i]
						if x[1] == nodelist[1]
							x=popfirst!(x)
							x=push!(x,U)
							pathlist=push!(pathlist,x)
							path=pathlist[length(pathlist)]
							check=1
						end
					end
				end
				check=0
				break
			elseif 0<H(CP,EP,CO,EO) && H(CP,EP,CO,EO)<CB
				Nodelist=push!(Nodelist,[CP,EP,CO,EO])
				for i = 1:length(pathlist)
					if check==0
						x=pathlist[i]
						if x[1] == nodelist[1]
							x=popfirst!(x)
							x=pushfirst!(x,temp)
							x=push!(x,U)
							pathlist=push!(pathlist,x)
							check=1
						end
					end
				end
				check=0
				break
			elseif H(CP,EP,CO,EO)==CB
				if temp != nodelist[1]
					Nodelist=push!(Nodelist,[CP,EP,CO,EO])
					for i = 1:length(pathlist)
						if check==0
							x=pathlist[i]
							if x[1] == nodelist[1]
								x=popfirst!(x)
								x=pushfirst!(x,temp)
								x=push!(x,U)
								pathlist=push!(pathlist,x)
								check=1
							end
						end
					end
					check=0
					break
				end
			else
				global CBlist=push!(CBlist,H(CP,EP,CO,EO)) #added global!!!
				break
			end
			(CP,EP,CO,EO)=cube
		elseif i==2
			temp=D(CP,EP,CO,EO)
			if H(CP,EP,CO,EO)==0
				complete=1
				for i = 1:length(pathlist)
					if check==0
						x=pathlist[i]
						if x[1] == nodelist[1]
							x=popfirst!(x)
							x=push!(x,D)
							pathlist=push!(pathlist,x)
							path=pathlist[length(pathlist)]
							check=1
						end
					end
				end
				check=0
				break
			elseif 0<H(CP,EP,CO,EO) && H(CP,EP,CO,EO)<CB
				Nodelist=push!(Nodelist,[CP,EP,CO,EO])
				for i = 1:length(pathlist)
					if check==0
						x=pathlist[i]
						if x[1] == nodelist[1]
							x=popfirst!(x)
							x=pushfirst!(x,temp)
							x=push!(x,D)
							pathlist=push!(pathlist,x)
							check=1
						end
					end
				end
				check=0
				break
			elseif H(CP,EP,CO,EO)==CB
				if temp != nodelist[1]
					Nodelist=push!(Nodelist,[CP,EP,CO,EO])
					for i = 1:length(pathlist)
						if check==0
							x=pathlist[i]
							if x[1] == nodelist[1]
								x=popfirst!(x)
								x=pushfirst!(x,temp)
								x=push!(x,D)
								pathlist=push!(pathlist,x)
								check=1
							end
						end
					end
					check=0
					break
				end
			else
				CBlist=push!(CBlist,H(CP,EP,CO,EO))
				break
			end
			(CP,EP,CO,EO)=cube
		elseif i==3
			temp=F(CP,EP,CO,EO)
			if H(CP,EP,CO,EO)==0
				complete=1
				for i = 1:length(pathlist)
					if check==0
						x=pathlist[i]
						if x[1] == nodelist[1]
							x=popfirst!(x)
							x=push!(x,F)
							pathlist=push!(pathlist,x)
							path=pathlist[length(pathlist)]
							check=1
						end
					end
				end
				check=0
				break
			elseif 0<H(CP,EP,CO,EO) && H(CP,EP,CO,EO)<CB
				Nodelist=push!(Nodelist,[CP,EP,CO,EO])
				for i = 1:length(pathlist)
					if check==0
						x=pathlist[i]
						if x[1] == nodelist[1]
							x=popfirst!(x)
							x=pushfirst!(x,temp)
							x=push!(x,F)
							pathlist=push!(pathlist,x)
							check=1
						end
					end
				end
				check=0
				break
			elseif H(CP,EP,CO,EO)==CB
				if temp != nodelist[1]
					Nodelist=push!(Nodelist,[CP,EP,CO,EO])
					for i = 1:length(pathlist)
						if check==0
							x=pathlist[i]
							if x[1] == nodelist[1]
								x=popfirst!(x)
								x=pushfirst!(x,temp)
								x=push!(x,F)
								pathlist=push!(pathlist,x)
								check=1
							end
						end
					end
					check=0
					break
				end
			else
				CBlist=push!(CBlist,H(CP,EP,CO,EO))
				break
			end
			(CP,EP,CO,EO)=cube
		elseif i==4
			temp=B(CP,EP,CO,EO)
			if H(CP,EP,CO,EO)==0
				complete=1
				for i = 1:length(pathlist)
					if check==0
						x=pathlist[i]
						if x[1] == nodelist[1]
							x=popfirst!(x)
							x=push!(x,B)
							pathlist=push!(pathlist,x)
							path=pathlist[length(pathlist)]
							check=1
						end
					end
				end
				check=0
				break
			elseif 0<H(CP,EP,CO,EO) && H(CP,EP,CO,EO)<CB
				Nodelist=push!(Nodelist,[CP,EP,CO,EO])
				for i = 1:length(pathlist)
					if check==0
						x=pathlist[i]
						if x[1] == nodelist[1]
							x=popfirst!(x)
							x=pushfirst!(x,temp)
							x=push!(x,B)
							pathlist=push!(pathlist,x)
							check=1
						end
					end
				end
				check=0
				break
			elseif H(CP,EP,CO,EO)==CB
				if temp != nodelist[1]
					Nodelist=push!(Nodelist,[CP,EP,CO,EO])
					for i = 1:length(pathlist)
						if check==0
							x=pathlist[i]
							if x[1] == nodelist[1]
								x=popfirst!(x)
								x=pushfirst!(x,temp)
								x=push!(x,B)
								pathlist=push!(pathlist,x)
								check=1
							end
						end
					end
					check=0
					break
				end
			else
				CBlist=push!(CBlist,H(CP,EP,CO,EO))
				break
			end
			(CP,EP,CO,EO)=cube
		elseif i==5
			temp=L(CP,EP,CO,EO)
			if H(CP,EP,CO,EO)==0
				complete=1
				for i = 1:length(pathlist)
					if check==0
						x=pathlist[i]
						if x[1] == nodelist[1]
							x=popfirst!(x)
							x=push!(x,L)
							pathlist=push!(pathlist,x)
							path=pathlist[length(pathlist)]
							check=1
						end
					end
				end
				check=0
				break
			elseif 0<H(CP,EP,CO,EO) && H(CP,EP,CO,EO)<CB
				Nodelist=push!(Nodelist,[CP,EP,CO,EO])
				for i = 1:length(pathlist)
					if check==0
						x=pathlist[i]
						if x[1] == nodelist[1]
							x=popfirst!(x)
							x=pushfirst!(x,temp)
							x=push!(x,L)
							pathlist=push!(pathlist,x)
							check=1
						end
					end
				end
				check=0
				break
			elseif H(CP,EP,CO,EO)==CB
				if temp != nodelist[1]
					Nodelist=push!(Nodelist,[CP,EP,CO,EO])
					for i = 1:length(pathlist)
						if check==0
							x=pathlist[i]
							if x[1] == nodelist[1]
								x=popfirst!(x)
								x=pushfirst!(x,temp)
								x=push!(x,L)
								pathlist=push!(pathlist,x)
								check=1
							end
						end
					end
					check=0
					break
				end
			else
				CBlist=push!(CBlist,H(CP,EP,CO,EO))
				break
			end
			(CP,EP,CO,EO)=cube
		elseif i==6
			temp=R(CP,EP,CO,EO)
			if H(CP,EP,CO,EO)==0
				complete=1
				for i = 1:length(pathlist)
					if check==0
						x=pathlist[i]
						if x[1] == nodelist[1]
							x=popfirst!(x)
							x=push!(x,R)
							pathlist=push!(pathlist,x)
							path=pathlist[length(pathlist)]
							check=1
						end
					end
				end
				check=0
				break
			elseif 0<H(CP,EP,CO,EO) && H(CP,EP,CO,EO)<CB
				Nodelist=push!(Nodelist,[CP,EP,CO,EO])
				for i = 1:length(pathlist)
					if check==0
						x=pathlist[i]
						if x[1] == nodelist[1]
							x=popfirst!(x)
							x=pushfirst!(x,temp)
							x=push!(x,R)
							pathlist=push!(pathlist,x)
							check=1
						end
					end
				end
				check=0
				break
			elseif H(CP,EP,CO,EO)==CB
				if temp != nodelist[1]
					Nodelist=push!(Nodelist,[CP,EP,CO,EO])
					for i = 1:length(pathlist)
						if check==0
							x=pathlist[i]
							if x[1] == nodelist[1]
								x=popfirst!(x)
								x=pushfirst!(x,temp)
								x=push!(x,R)
								pathlist=push!(pathlist,x)
								check=1
							end
						end
					end
					check=0
					break
				end
			else
				CBlist=push!(CBlist,H(CP,EP,CO,EO))
				break
			end
			(CP,EP,CO,EO)=cube
		elseif i==7
			temp=U(CP,EP,CO,EO)
			temp=U(CP,EP,CO,EO)
			temp=U(CP,EP,CO,EO)
			if H(CP,EP,CO,EO)==0
				complete=1
				for i = 1:length(pathlist)
					if check==0
						x=pathlist[i]
						if x[1] == nodelist[1]
							x=popfirst!(x)
							x=push!(x,U')
							pathlist=push!(pathlist,x)
							path=pathlist[length(pathlist)]
							check=1
						end
					end
				end
				check=0
				break
			elseif 0<H(CP,EP,CO,EO) && H(CP,EP,CO,EO)<CB
				Nodelist=push!(Nodelist,[CP,EP,CO,EO])
				for i = 1:length(pathlist)
					if check==0
						x=pathlist[i]
						if x[1] == nodelist[1]
							x=popfirst!(x)
							x=pushfirst!(x,temp)
							x=push!(x,U')
							pathlist=push!(pathlist,x)
							check=1
						end
					end
				end
				check=0
				break
			elseif H(CP,EP,CO,EO)==CB
				if temp != nodelist[1]
					Nodelist=push!(Nodelist,[CP,EP,CO,EO])
					for i = 1:length(pathlist)
						if check==0
							x=pathlist[i]
							if x[1] == nodelist[1]
								x=popfirst!(x)
								x=pushfirst!(x,temp)
								x=push!(x,U')
								pathlist=push!(pathlist,x)
								check=1
							end
						end
					end
					check=0
					break
				end
			else
				CBlist=push!(CBlist,H(CP,EP,CO,EO))
				break
			end
			(CP,EP,CO,EO)=cube
		elseif i==8
			temp=D(CP,EP,CO,EO)
			temp=D(CP,EP,CO,EO)
			temp=D(CP,EP,CO,EO)
			if H(CP,EP,CO,EO)==0
				complete=1
				for i = 1:length(pathlist)
					if check==0
						x=pathlist[i]
						if x[1] == nodelist[1]
							x=popfirst!(x)
							x=push!(x,D')
							pathlist=push!(pathlist,x)
							path=pathlist[length(pathlist)]
							check=1
						end
					end
				end
				check=0
				break
			elseif 0<H(CP,EP,CO,EO) && H(CP,EP,CO,EO)<CB
				Nodelist=push!(Nodelist,[CP,EP,CO,EO])
				for i = 1:length(pathlist)
					if check==0
						x=pathlist[i]
						if x[1] == nodelist[1]
							x=popfirst!(x)
							x=pushfirst!(x,temp)
							x=push!(x,D')
							pathlist=push!(pathlist,x)
							check=1
						end
					end
				end
				check=0
				break
			elseif H(CP,EP,CO,EO)==CB
				if temp != nodelist[1]
					Nodelist=push!(Nodelist,[CP,EP,CO,EO])
					for i = 1:length(pathlist)
						if check==0
							x=pathlist[i]
							if x[1] == nodelist[1]
								x=popfirst!(x)
								x=pushfirst!(x,temp)
								x=push!(x,D')
								pathlist=push!(pathlist,x)
								check=1
							end
						end
					end
					check=0
					break
				end
			else
				CBlist=push!(CBlist,H(CP,EP,CO,EO))
				break
			end
			(CP,EP,CO,EO)=cube
		elseif i==9
			temp=F(CP,EP,CO,EO)
			temp=F(CP,EP,CO,EO)
			temp=F(CP,EP,CO,EO)
			if H(CP,EP,CO,EO)==0
				complete=1
				for i = 1:length(pathlist)
					if check==0
						x=pathlist[i]
						if x[1] == nodelist[1]
							x=popfirst!(x)
							x=push!(x,F')
							pathlist=push!(pathlist,x)
							path=pathlist[length(pathlist)]
							check=1
						end
					end
				end
				check=0
				break
			elseif 0<H(CP,EP,CO,EO) && H(CP,EP,CO,EO)<CB
				Nodelist=push!(Nodelist,[CP,EP,CO,EO])
				for i = 1:length(pathlist)
					if check==0
						x=pathlist[i]
						if x[1] == nodelist[1]
							x=popfirst!(x)
							x=pushfirst!(x,temp)
							x=push!(x,F')
							pathlist=push!(pathlist,x)
							check=1
						end
					end
				end
				check=0
				break
			elseif H(CP,EP,CO,EO)==CB
				if temp != nodelist[1]
					Nodelist=push!(Nodelist,[CP,EP,CO,EO])
					for i = 1:length(pathlist)
						if check==0
							x=pathlist[i]
							if x[1] == nodelist[1]
								x=popfirst!(x)
								x=pushfirst!(x,temp)
								x=push!(x,F')
								pathlist=push!(pathlist,x)
								check=1
							end
						end
					end
					check=0
					break
				end
			else
				CBlist=push!(CBlist,H(CP,EP,CO,EO))
				break
			end
			(CP,EP,CO,EO)=cube
		elseif i==10
			temp=B(CP,EP,CO,EO)
			temp=B(CP,EP,CO,EO)
			temp=B(CP,EP,CO,EO)
			if H(CP,EP,CO,EO)==0
				complete=1
				for i = 1:length(pathlist)
					if check==0
						x=pathlist[i]
						if x[1] == nodelist[1]
							x=popfirst!(x)
							x=push!(x,B')
							pathlist=push!(pathlist,x)
							path=pathlist[length(pathlist)]
							check=1
						end
					end
				end
				check=0
				break
			elseif 0<H(CP,EP,CO,EO) && H(CP,EP,CO,EO)<CB
				Nodelist=push!(Nodelist,[CP,EP,CO,EO])
				for i = 1:length(pathlist)
					if check==0
						x=pathlist[i]
						if x[1] == nodelist[1]
							x=popfirst!(x)
							x=pushfirst!(x,temp)
							x=push!(x,B')
							pathlist=push!(pathlist,x)
							check=1
						end
					end
				end
				check=0
				break
			elseif H(CP,EP,CO,EO)==CB
				if temp != nodelist[1]
					Nodelist=push!(Nodelist,[CP,EP,CO,EO])
					for i = 1:length(pathlist)
						if check==0
							x=pathlist[i]
							if x[1] == nodelist[1]
								x=popfirst!(x)
								x=pushfirst!(x,temp)
								x=push!(x,B')
								pathlist=push!(pathlist,x)
								check=1
							end
						end
					end
					check=0
					break
				end
			else
				CBlist=push!(CBlist,H(CP,EP,CO,EO))
				break
			end
			(CP,EP,CO,EO)=cube
		elseif i==11
			temp=L(CP,EP,CO,EO)
			temp=L(CP,EP,CO,EO)
			temp=L(CP,EP,CO,EO)
			if H(CP,EP,CO,EO)==0
				complete=1
				for i = 1:length(pathlist)
					if check==0
						x=pathlist[i]
						if x[1] == nodelist[1]
							x=popfirst!(x)
							x=push!(x,L')
							pathlist=push!(pathlist,x)
							path=pathlist[length(pathlist)]
							check=1
						end
					end
				end
				check=0
				break
			elseif 0<H(CP,EP,CO,EO) && H(CP,EP,CO,EO)<CB
				Nodelist=push!(Nodelist,[CP,EP,CO,EO])
				for i = 1:length(pathlist)
					if check==0
						x=pathlist[i]
						if x[1] == nodelist[1]
							x=popfirst!(x)
							x=pushfirst!(x,temp)
							x=push!(x,L')
							pathlist=push!(pathlist,x)
							check=1
						end
					end
				end
				check=0
				break
			elseif H(CP,EP,CO,EO)==CB
				if temp != nodelist[1]
					Nodelist=push!(Nodelist,[CP,EP,CO,EO])
					for i = 1:length(pathlist)
						if check==0
							x=pathlist[i]
							if x[1] == nodelist[1]
								x=popfirst!(x)
								x=pushfirst!(x,temp)
								x=push!(x,L')
								pathlist=push!(pathlist,x)
								check=1
							end
						end
					end
					check=0
					break
				end
			else
				CBlist=push!(CBlist,H(CP,EP,CO,EO))
				break
			end
			(CP,EP,CO,EO)=cube
		elseif i==12
			temp=R(CP,EP,CO,EO)
			temp=R(CP,EP,CO,EO)
			temp=R(CP,EP,CO,EO)
			if H(CP,EP,CO,EO)==0
				complete=1
				for i = 1:length(pathlist)
					if check==0
						x=pathlist[i]
						if x[1] == nodelist[1]
							x=popfirst!(x)
							x=push!(x,R')
							pathlist=push!(pathlist,x)
							path=pathlist[length(pathlist)]
							check=1
						end
					end
				end
				check=0
				break
			elseif 0<H(CP,EP,CO,EO) && H(CP,EP,CO,EO)<CB
				Nodelist=push!(Nodelist,[CP,EP,CO,EO])
				for i = 1:length(pathlist)
					if check==0
						x=pathlist[i]
						if x[1] == nodelist[1]
							x=popfirst!(x)
							x=pushfirst!(x,temp)
							x=push!(x,R')
							pathlist=push!(pathlist,x)
							check=1
						end
					end
				end
				check=0
				break
			elseif H(CP,EP,CO,EO)==CB
				if temp != nodelist[1]
					Nodelist=push!(Nodelist,[CP,EP,CO,EO])
					for i = 1:length(pathlist)
						if check==0
							x=pathlist[i]
							if x[1] == nodelist[1]
								x=popfirst!(x)
								x=pushfirst!(x,temp)
								x=push!(x,R')
								pathlist=push!(pathlist,x)
								check=1
							end
						end
					end
					check=0
					break
				end
			else
				CBlist=push!(CBlist,H(CP,EP,CO,EO))
				break
			end
			(CP,EP,CO,EO)=cube
		else
			temp=cube
		end
	end	
end

function IDA_algorithm(CP,EP,CO,EO) # Function to run the IDA* algorithm
    global CB=H(CP,EP,CO,EO) #added global!!!
    global cube=[CP,EP,CO,EO] #added global!!!
    global CBlist=[]#added global!!!
    global Nodelist=(cube) #added global!!!
    global pathlist=(cube) #added global!!!
    global complete=0#added global!!!
    count=0
    #global currentnode=[CP,EP,CO,EO] #???? #added global!!!
    global check = 0 #added global!!!
	while count<26
	    if sum(length,Nodelist)/40==1
	        CP=Nodelist[1]
    		EP=Nodelist[2]
    		CO=Nodelist[3]
    		EO=Nodelist[4]
        else
    		x=Nodelist[1]
    		CP=x[1]
    		EP=x[2]
    		CO=x[3]
    		EO=x[4]
    	end
		IDA(CP,EP,CO,EO)
		count=count+1
		Nodelist= popfirst!(Nodelist)
		if length(Nodelist) == 0
			if complete==1
				count=26
			else
				CB=minimum(CBlist)
				Nodelist=push!(Nodelist,cube)
				count=0
				IDA_algorithm(CP,EP,CO,EO)
			end
		else
			IDA_algorithm(CP,EP,CO,EO)
		end
	end
	if complete ==1
		print("The optimal path is ", count, " steps long. The path is: ", pathlist, ".")
	else
		print("It is not possible to solve the cube from the given starting configuration.")
	end
end
